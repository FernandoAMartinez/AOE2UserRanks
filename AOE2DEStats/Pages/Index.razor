@page "/"
@inject Services.IStringServices stringService
@inject Services.ILeaderboardService leaderboardService
@inject ILocalStorageService localStorage

<div class="container-fluid">
    <div class="alert text-dark" style="background-color: #ffbb33ff;">
        <h3 class="alert-heading">
            Welcome to AOE2 Ladder Stats!
        </h3>
        <p>This site is still in development, feel free to test it and any comment is welcome.</p>

    </div>
</div>

@*<div class="container">
        <div class="jumbotron text-dark">
            <h1 class="display-4">Welcome to AOE2 Ladder Stats!</h1>
            <p class="lead"></p>
            <hr class="my-4">
            <p>For issues and ideas please consider open a Github Issue.</p>
            <a class="btn btn-primary btn-lg" href="#" role="button">Learn more</a>
        </div>
    </div>*@

<div class="container">
    <div class="row">
        <div class="col-6">
            <form>
                <label class="form-label" for="searchUser">Search User</label>
                <span>@ListedProfiles.Count</span>
                <div class=" input-group mb-3">
                    <input type="search" class="form-control" id="searchUser" @bind="ProfileName" />
                    <button class="btn btn-primary" type="button" @onclick="SearchProfileByNameAsync">Search</button>
                </div>
            </form>
        </div>
    </div>

    <DatagridView Items="ListedProfiles.OrderBy(x => x.Rank).ToList()" Context="profile">
        <TableHeader>
            <th>#Rank</th>
            <th>Name</th>
            <th>Rating</th>
            <th>Country</th>
            <th>Games</th>
            <th>Wins</th>
            <th>Losses</th>
            <th></th>
        </TableHeader>
        <RowTemplate>
            <td>@profile.Rank</td>
            <td> <a href="@string.Format($"/profile/{profile.ProfileId.ToString()}")">@profile.Name</a> </td>
            <td>@profile.Rating</td>
            <td><img src="https://www.countryflags.io/@profile.Country/flat/32.png"></td>
            <td>@profile.Games</td>
            <td>@profile.Wins</td>
            <td>@profile.Losses</td>
            <td><button class="btn btn-outline-danger" type="button" @onclick="@(() => UpdateListedProfiles(profile))">Remove</button></td>
        </RowTemplate>
    </DatagridView>
</div>

@code {

    private Models.GeneralData GeneralData;

    public string ProfileName { get; set; }

    private List<Profile> ListedProfiles;

    protected override async Task OnInitializedAsync()
    {
        ListedProfiles = new List<Profile>();
        var storedStrings = await localStorage.GetItemAsync<GeneralData>("strings_en");
        if (storedStrings == null) GeneralData = await stringService.GetStringsAsync("en");
        else GeneralData = storedStrings;
        await localStorage.SetItemAsync<GeneralData>("strings_en", GeneralData);
    }

    protected async override Task OnParametersSetAsync()
    {
        var storedProfiles = await localStorage.GetItemAsync<List<Profile>>("storedProfiles");
        if (storedProfiles != null)
        {
            ListedProfiles = storedProfiles;
        }
    }

    private async void SearchProfileByNameAsync()
    {

        if (ListedProfiles.Any(x => x.Name == ProfileName) != true)
        {
            var leaderboardResult = await leaderboardService.GetLeaderboardAsync(3, 1, 1, ProfileName, null, null);
            var profile = leaderboardResult.Leaderboard.FirstOrDefault();
            if (profile != null)
            {
                ListedProfiles.Add(profile);
                await localStorage.SetItemAsync<List<Models.Profile>>("storedProfiles", ListedProfiles);
            }

        }
    }

    private async void UpdateListedProfiles(Models.Profile profile)
    {
        ListedProfiles.Remove(profile);
        await localStorage.SetItemAsync<List<Models.Profile>>("storedProfiles", ListedProfiles);

    }
}