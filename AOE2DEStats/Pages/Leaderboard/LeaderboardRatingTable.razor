@inject HttpClient Http
@inject Services.ILeaderboardService leaderboardService
@inject Services.IStringServices stringService

<h3>LeaderboardRatingTable</h3>
@if (CurrentLeaderboard == null)
{
    <div class="container-fluid row text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}
else
{
    <div class="container-fluid table-responsive text-center">
        <div class="row text-center">
            <div class="card-title ">
                <h3>Leaderboard | @GeneralData.Leaderboards.Where(x => x.Id == int.Parse(leaderboardId)).Select(x => x.Name).FirstOrDefault()</h3>
            </div>
        </div>
        <table class="table table-light table-hover table-striped caption-top rounded-0">
            <caption>@leaderboardId - @GeneralData.Leaderboards.Where(x => x.Id == int.Parse(leaderboardId)).Select(x => x.Name).FirstOrDefault() </caption>
            <thead>
                <tr>
                    <th>#Rank</th>
                    <th>Name</th>
                    <th>Rating</th>
                    <th>Country</th>
                    <th>Games</th>
                    <th>Wins</th>
                    <th>Losses</th>
                </tr>
            </thead>
            <tbody class="table-hover">
                @foreach (var profile in CurrentLeaderboard.Leaderboard)
                {
                    <tr>
                        <td>@profile.Rank</td>
                        <td> <a href="@string.Format($"/profile/{profile.ProfileId.ToString()}")">@profile.Name</a> </td>
                        <td>@profile.Rating</td>
                        <td><img src="https://www.countryflags.io/@profile.Country/flat/32.png"></td>
                        <td>@profile.Games</td>
                        <td>@profile.Wins</td>
                        <td>@profile.Losses</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    [Parameter]
    public string leaderboardId { get; set; }

    [Inject]
    protected Services.ILeaderboardService leaderboard { get; set; }

    [Inject]
    protected Services.IStringServices strings { get; set; }


    private int startResult;

    private const int DEFAULT_COUNT = 50;


    private Models.LeaderboardResult CurrentLeaderboard;
    private Models.GeneralData GeneralData;


    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
        CurrentLeaderboard = await leaderboard.GetLeaderboardAsync(int.Parse(leaderboardId), 1, DEFAULT_COUNT, null, null, null);
        GeneralData = await stringService.GetStringsAsync("en");

    }
}
