@page "/profile/{steamId}/matches"
@inject HttpClient Http
<h3>UserMatches</h3>

<table class="table table-dark table-hover table-striped shadow-sm">
    <thead>
        <tr>
            <th>Leaderboard</th>
            <th>Rating</th>
            <th>Match</th>
            <th>Map</th>
            <th>Server</th>
            <th>Result</th>
        </tr>
    </thead>

    @if (LastMatchesV2 == null)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    }
    else
    {

        <tbody class="table-hover">
            @foreach (var match in LastMatchesV2.Where(x => x.Ranked == true).ToList())
            {
                @*@if (@match.Players.Where(x => x.SteamId == steamId).Select(x => x.Won).FirstOrDefault() == true)
                {
                    cssClassWin = "font-weight-bold";
                }*@
                <tr class="@cssClassWin">
                    <td>@GeneralData.GameTypes.Where(x => x.Id == match.GameType).Select(x => x.Name).FirstOrDefault()</td>
                    <td>@match.Players.Where(x => x.SteamId == steamId).Select(x => x.Rating).FirstOrDefault()</td>
                    <td>
                        <div class="row">
                            <img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == match.Players[0].Civilization).Select(x => x.Name).FirstOrDefault()}.png")" sizes="32" />
                            @string.Format($"{match.Players[0].Name} vs {match.Players[1].Name}")
                            <img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == match.Players[1].Civilization).Select(x => x.Name).FirstOrDefault()}.png")" sizes="32" />
                        </div>
                    </td>
                    <td>@GeneralData.MapTypes.Where(x => x.Id == match.MapType).Select(x => x.Name).FirstOrDefault()</td>
                    <td>@match.Server</td>
                    <td>
                        @if (match.Players.Where(x => x.SteamId == steamId).Select(x => x.Won).FirstOrDefault() == null)
                        {
                            <span class="badge bg-warning text-dark">Drop</span>
                        }
                        else if (match.Players.Where(x => x.SteamId == steamId).Select(x => x.Won).FirstOrDefault() == true)
                        {
                            <span class="badge bg-success">Won</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Lost</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    }
</table>
@code {
    [Parameter]
    public string steamId { get; set; }
    //private string steamId;
    private string JsonResultMatches;
    //private Models.LastMatchResult LastMatches;
    private Models.Match[] LastMatchesV2;
    private const string GAME = "aoe2de";
    private const string API_LAST_MATCHES = "https://aoe2.net/api/player/lastmatch";

    private int countMatches = 15;
    private const string API_LAST_MATCHES_V2 = "https://aoe2.net/api/player/matches";

    private string cssClassWin;

    private string JsonResultStrings;
    private Models.GeneralData GeneralData;
    private const string LANG = "en";
    private const string API_STRINGS = "https://aoe2.net/api/strings";
    protected override async Task OnInitializedAsync()
    {
        JsonResultStrings = await Http.GetStringAsync($"{API_STRINGS}?game={GAME}&language={LANG}");
        //GeneralData = await Http.GetFromJsonAsync<Models.GeneralData>("https://aoe2.net/api/strings?game=aoe2de&language=en");
        GeneralData = Newtonsoft.Json.JsonConvert.DeserializeObject<Models.GeneralData>(JsonResultStrings);

        //steamId = "76561198074662559";
        //steamId = "76561198088251629";
        //JsonResultMatches = await Http.GetStringAsync($"{API_LAST_MATCHES}?game={GAME}&steam_id={steamId}");
        //LastMatches = Newtonsoft.Json.JsonConvert.DeserializeObject<Models.LastMatchResult>(JsonResultMatches);

        JsonResultMatches = await Http.GetStringAsync($"{API_LAST_MATCHES_V2}?game={GAME}&steam_id={steamId}&count={countMatches}");
        LastMatchesV2 = Newtonsoft.Json.JsonConvert.DeserializeObject<Models.Match[]>(JsonResultMatches);
    }

}
