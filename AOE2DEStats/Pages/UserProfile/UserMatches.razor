@page "/profile/{profile_id}/matches"
@inject Services.IStringServices stringService
@inject Services.IPlayerServices playerService

<h3>UserMatches</h3>
@if (LastMatches == null)
{
    <div class="container-fluid row text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}
else
{
    <DatagridView Items="LastMatches.Where(x => x.Ranked == true).ToList()" Context="match">
        <TableHeader>
            <th>Leaderboard</th>
            <th>Rating</th>
            <th>Match</th>
            <th>Map</th>
            <th>Server</th>
            <th>Result</th>
        </TableHeader>
        <RowTemplate>
            <td class="text-center">
                @GeneralData.Leaderboards.Where(x => x.Id == match.LeaderboardId).Select(x => x.Name).FirstOrDefault()
            </td>
            <td class="text-center">
                @match.Players.Where(x => x.ProfileId == Convert.ToInt32(profile_id)).Select(x => x.Rating).FirstOrDefault()
            </td>
            <td class="text-center">
                <div class="row text-center">
                    <span class="text-center">
                        @foreach (var player in match.Players.OrderBy(x => x.Team))
                            {
                            @if (player != null)
                                {

                                @if (match.NumSlots.Equals(2))
                                    {
                                    @if (player.Slot.Equals(1))
                                        {
                                        @player.Name
                                        <span><img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" /></span>
                                        <span> vs. </span>
                                        }
                                        else
                                        {
                                        <span><img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" /></span>
                                        @player.Name
                                        }
                                    }

                                @if (match.NumSlots > 2)
                                    {
                                    @player.Name
                                    <span><img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" /></span>

                                    @if (player != match.Players.Last())
                                        {
                                        <span> vs. </span>
                                        }
                                        else { break; }
                                    }
                                }
                            }

                    </span>
                </div>

            </td>
            <td class="text-center">
                @GeneralData.MapTypes.Where(x => x.Id == match.MapType).Select(x => x.Name).FirstOrDefault()
            </td>
            <td class="text-center">
                @match.Server
            </td>
            <td class="text-center">


                @if (match.Players.Where(x => x.ProfileId == Convert.ToInt32(profile_id)).Select(x => x.Won).FirstOrDefault() == null)
                    {
                    <span class="badge bg-warning text-dark">Drop</span>
                    }
                    else if (match.Players.Where(x => x.ProfileId == Convert.ToInt32(profile_id)).Select(x => x.Won).FirstOrDefault() == true)
                    {
                    <span class="badge bg-success">Won</span>
                    }
                    else
                    {
                    <span class="badge bg-danger">Lost</span>
                    }

            </td>
        </RowTemplate>
    </DatagridView>
}

@code {
    [Parameter]
    public string profile_id { get; set; }

    [Inject]
    protected Services.IStringServices ApiStrings { get; set; }

    [Inject]
    protected Services.IPlayerServices ApiPlayer { get; set; }

    private Models.GeneralData GeneralData;
    private Models.Match[] LastMatches;
    private int countMatches = 25;


    protected override async Task OnInitializedAsync()
    {
        GeneralData = await ApiStrings.GetStringsAsync("en");
        LastMatches = await ApiPlayer.GetMatchHistoryAsync(1, countMatches, null, profile_id, null, null);
    }

    //private int GetDeltaRating(int previousRating, int currentRating) => currentRating - previousRating;
    private int? GetDeltaRating(int? previousRating, int? currentRating)
    {
        if (previousRating == null) previousRating = 0;
        if (currentRating == null) currentRating = 0;
        return currentRating - previousRating;
    }
}
