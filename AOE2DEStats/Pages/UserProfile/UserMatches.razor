@page "/profile/{profile_id}/matches"
@inject HttpClient Http
@inject Services.IStringServices stringService
@inject Services.IMatchServices matchService

<h3>UserMatches</h3>

<div class="table-responsive">

    <table class="table table-dark table-hover table-striped shadow-sm">
        <thead>
            <tr>
                <th class="text-center">Leaderboard</th>
                <th class="text-center">Rating</th>
                <th class="text-center">Match</th>
                <th class="text-center">Map</th>
                <th class="text-center">Server</th>
                <th class="text-center">Result</th>
            </tr>
        </thead>

        @if (LastMatches == null)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden"></span>
            </div>
        }
        else
        {

            <tbody class="table-hover">
                @foreach (var match in LastMatches.Where(x => x.Ranked == true).ToList())
                {
                    @*@if (@match.Players.Where(x => x.SteamId == steamId).Select(x => x.Won).FirstOrDefault() == true)
                        {
                            cssClassWin = "font-weight-bold";
                        }*@
                    <tr class="@cssClassWin">
                        <td class="text-center">@GeneralData.Leaderboards.Where(x => x.Id == match.LeaderboardId).Select(x => x.Name).FirstOrDefault()</td>
                        <td class="text-center">
                            @match.Players.Where(x => x.ProfileId == Convert.ToInt32(profile_id)).Select(x => x.Rating).FirstOrDefault()

                        </td>
                        <td class="text-center">
                            <div class="row text-center">
                                <span class="text-center">
                                    @foreach (var player in match.Players.OrderBy(x => x.Team))
                                    {
                                        @if (match.NumSlots.Equals(2))
                                        {
                                            @if (player.Slot.Equals(1))
                                            {
                                                @player.Name
                                                <span><img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" /></span>
                                                <span> vs. </span>
                                            }
                                            else
                                            {
                                                <span><img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" /></span>
                                                @player.Name
                                            }
                                        }

                                        @if (match.NumSlots > 2)
                                        {
                                            @player.Name
                                            <span><img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" /></span>

                                            @if (player != match.Players.Last())
                                            {
                                                <span> vs. </span>
                                            }
                                            else { break; }
                                            @*@foreach (var teamPlayer in match.Players)
                                                {
                                                }*@
                                        }
                                    }

                                </span>
                            </div>
                        </td>
                        <td class="text-center">@GeneralData.MapTypes.Where(x => x.Id == match.MapType).Select(x => x.Name).FirstOrDefault()</td>
                        <td class="text-center">@match.Server</td>
                        <td class="text-center">
                            @if (match.Players.Where(x => x.ProfileId == Convert.ToInt32(profile_id)).Select(x => x.Won).FirstOrDefault() == null)
                            {
                                <span class="badge bg-warning text-dark">Drop</span>
                            }
                            else if (match.Players.Where(x => x.ProfileId == Convert.ToInt32(profile_id)).Select(x => x.Won).FirstOrDefault() == true)
                            {
                                <span class="badge bg-success">Won</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Lost</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>
</div>
@code {
    [Parameter]
    public string profile_id { get; set; }

    [Inject]
    protected Services.IStringServices ApiStrings { get; set; }

    [Inject]
    protected Services.IMatchServices ApiMatch { get; set; }

    private Models.GeneralData GeneralData;
    private Models.Match[] LastMatches;
    private int countMatches = 25;

    private string cssClassWin;


    protected override async Task OnInitializedAsync()
    {
        GeneralData = await ApiStrings.GetStringsAsync("en");
        LastMatches = await ApiMatch.GetMatchesSinceAsync(countMatches, null);
    }

    //private int GetDeltaRating(int previousRating, int currentRating) => currentRating - previousRating;
    private int? GetDeltaRating(int? previousRating, int? currentRating)
    {
        if (previousRating == null) previousRating = 0;
        if (currentRating == null) currentRating = 0;
        return currentRating - previousRating;
    }
}
