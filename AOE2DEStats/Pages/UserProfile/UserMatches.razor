@page "/profile/{ProfileId}/matches"
@inject Services.IStringServices stringService
@inject Services.IPlayerServices playerService
@inject ILocalStorageService localStorage

@if (LastMatches == null)
{
    <div class="container-fluid row text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}
else
{
    <DatagridView Items="LastMatches.Where(x => x.Ranked == true).ToList()" Context="match">
        <TableHeader>
            <th>Leaderboard</th>
            <th>Rating</th>
            <th>Match</th>
            <th>Map</th>
            <th>Server</th>
            <th>Result</th>
            @*<th>Match Detail</th>*@
        </TableHeader>
        <RowTemplate>
            <td class="text-center">
                @GeneralData.Leaderboards.Where(x => x.Id == match.LeaderboardId).Select(x => x.Name).FirstOrDefault()
            </td>
            <td class="text-center">
                @match.Players.Where(x => x.ProfileId == Convert.ToInt32(ProfileId)).Select(x => x.Rating).FirstOrDefault()
            </td>
            <td class="text-center">
                <div class="row text-center justify-content-center">
                    <!-- Modif 20/04/2021 -->
                    @if (previousTeam != 1) { previousTeam = 1; }

                    @foreach (var player in match.Players.OrderBy(x => x.Team).ToList())
                        {
                        @if (player != null)
                            {
                            //if (previousTeam == null) previousTeam = player.Team;

                            @if (match.NumSlots.Equals(2))
                                {
                                @if (player.Slot.Equals(1))
                                    {
                                    <div class="col-5">
                                        <span class="font-weight-bold">
                                            <a href="@string.Format($"/profile/{player.ProfileId.ToString()}")">@player.Name</a>
                                        </span>
                                        <span>
                                            <img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" />
                                        </span>
                                    </div>
                                    <div class="col-2">
                                        <span class="font-italic"> vs. </span>
                                    </div>
                                    }
                                    else
                                    {
                                    <div class="col-5">
                                        <span><img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" /></span>
                                        <span class="font-weight-bold">
                                            <a href="@string.Format($"/profile/{player.ProfileId.ToString()}")">@player.Name</a>
                                        </span>
                                    </div>
                                    }
                                }

                            @if (match.NumSlots > 2)
                                {
                                @if (player.Team != previousTeam)
                                    {
                                    <div class="w-100"></div>
                                    @if (player != match.Players.Last())
                                        {
                                        <div class="col-12">
                                            <span class="font-italic"> vs. </span>
                                        </div>
                                        }
                                    <div class="w-100"></div>
                                    }
                                <div class="col-3">
                                    <span class="font-weight-bold">
                                        <a href="@string.Format($"/profile/{player.ProfileId.ToString()}")">@player.Name</a>
                                    </span>
                                    <span><img src="@string.Format($"/img/aoe2decivs/{GeneralData.Civilizations.Where(x => x.Id == player.Civilization).Select(x => x.Name).FirstOrDefault()}.png")" width="32" height="32" /></span>
                                </div>
                                    previousTeam = player.Team;
                                }
                            }
                        }
                </div>
            </td>
            <td class="text-center">
                @GeneralData.MapTypes.Where(x => x.Id == match.MapType).Select(x => x.Name).FirstOrDefault()
            </td>
            <td class="text-center">
                @match.Server
            </td>
            <td class="text-center">
                @if (match.Players.Where(x => x.ProfileId == Convert.ToInt32(ProfileId)).Select(x => x.Won).FirstOrDefault() == null)
                    {
                    <span class="badge bg-warning text-dark">Drop</span>
                    }
                    else if (match.Players.Where(x => x.ProfileId == Convert.ToInt32(ProfileId)).Select(x => x.Won).FirstOrDefault() == true)
                    {
                    <span class="badge bg-success">Won</span>
                    }
                    else
                    {
                    <span class="badge bg-danger">Lost</span>
                    }
            </td>

        </RowTemplate>
    </DatagridView>

    <div class="mt-2 font-italic">
        <a href="@string.Format($"/profile/{ProfileId}/matches")">Go to full list of matches...</a>
    </div>
}

@code {
    private Modal Modal { get; set; }

    [Parameter]
    public string ProfileId { get; set; }

    [Parameter]
    public int countMatches { get; set; }

    private int? previousTeam = 1;
    private Models.GeneralData GeneralData;
    private Models.Match[] LastMatches;


    protected override async Task OnInitializedAsync()
    {
        var storedStrings = await localStorage.GetItemAsync<GeneralData>("strings_en");
        if (storedStrings == null) GeneralData = await stringService.GetStringsAsync("en");
        else GeneralData = storedStrings;
        await localStorage.SetItemAsync<GeneralData>("strings_en", GeneralData);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (countMatches == 0) countMatches = 50;
        LastMatches = await playerService.GetMatchHistoryAsync(0, countMatches, null, ProfileId, null, null);
    }

    //private int GetDeltaRating(int previousRating, int currentRating) => currentRating - previousRating;
    private int? GetDeltaRating(int? previousRating, int? currentRating)
    {
        if (previousRating == null) previousRating = 0;
        if (currentRating == null) currentRating = 0;
        return currentRating - previousRating;
    }
}
