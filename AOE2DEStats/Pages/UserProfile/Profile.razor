@page "/profile/{profile_id}"
@inject HttpClient Http
@inject Services.ILeaderboardService leaderboardService
<h3>Profile</h3>

@*<div class="container-fluid">
        <div class="row p-2 border">
            <div class="col-md-4 p-2 border">
                <div class="card bg-dark text-white">

                    <div class="card-header">
                        @steamId
                    </div>
                    <div class="card">
                        <div class="card-img">
                            <img src="~/icon-512.png" />
                        </div>
                        <div class="card-body">
                            <span class="oi-person">KrapsuS</span>
                            <span class="oi-code">1103</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-8 p-2 border">
                <UserMatches steamId="@steamId" />
            </div>
        </div>
    </div>*@

<!-- new design -->
@if (CurrentLeaderboard == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-4">
                <div class="row border-success">
                    <!-- Profile Info -->
                    <CascadingValue Name="ProfileId" Value="@profile_id">
                        <CascadingValue Name="CurrentLeaderboard" Value="@CurrentLeaderboard">
                            <Stats />
                        </CascadingValue>
                    </CascadingValue>
                </div>
                <div class="row border-danger">
                    <!-- Civilization Stats -->
                </div>
            </div>
            <div class="col">
                <UserMatches profile_id="@profile_id" />
            </div>
        </div>
    </div>

}


@code {
    [Parameter]
    public string profile_id { get; set; }

    [Inject]
    protected Services.ILeaderboardService ApiLeaderboard { get; set; }
    private Models.LeaderboardResult CurrentLeaderboard;

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
        CurrentLeaderboard = await ApiLeaderboard.GetLeaderboardAsync(3, 1, 1, null, null, profile_id);
    }


}
