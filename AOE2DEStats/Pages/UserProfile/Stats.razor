@inject IPlayerServices playerService
@inject IStringServices stringService
@inject ILeaderboardService leaderboardService
@inject ILocalStorageService localStorage

@if (currentProfile == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <!-- Profile Stats Component -->
        <div class="card text-center text-dark shadow">
            <div class="card-header">
                <div class="container">
                    <div class="row justify-content-center">
                        <div class="col">
                            <span class="float-left">#@currentProfile.Rank</span>
                        </div>
                        <div class="col-8">
                            <img class="img-fluid rounded" src="https://www.countryflags.io/@currentProfile.Country/flat/32.png">
                            @currentProfile.Name
                        </div>
                        <div class="col form-check form-switch">
                            <div class="float-right">
                                <input class="form-check-input" type="checkbox" value="" id="userSelected" checked="@pinnedProfile" @onchange="EventArgs => { IsProfilePinned(EventArgs.Value); }" />
                                <label class="form-check-label" for="userSelected">Pin</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-img">
                <img src="@string.Format($"/img/aoe2decivs/Aztecs.png")" width="96" height="96" class="img-thumbnail" />
                <!-- agregar imagen de steam -->
            </div>
            <div class="card-body">
                <div class="container">
                    <DatagridView Items="ProfileLeaderboards.Where(x => x.CountResult != 0).ToList()" Context="l">
                        <TableHeader>
                            <th>Type</th>
                            <th>Rating</th>
                            <th>Wins</th>
                            <th>Loses</th>
                        </TableHeader>
                        <RowTemplate>
                            <td>
                                @GeneralData.Leaderboards.Where(x => x.Id == l.LeaderboardId).Select(x => x.Name).First()
                                @if (IsReachingHighestRank(l))
                                    {
                                    <span class="badge badge-success">~50</span>
                                    }
                            </td>
                            <td>
                                @l.Leaderboard.Select(x => x.Rating).First()
                            </td>
                            <td>
                                @l.Leaderboard.Select(x => x.Rating).First()
                            </td>
                            <td>
                                @l.Leaderboard.Select(x => x.Wins).First()
                            </td>
                        </RowTemplate>
                    </DatagridView>
                </div>
            </div>
            <div class="card-footer">
                <div class="row text-center">
                    <a class="btn btn-outline-primary col mr-1" href="@string.Format($"https://steamcommunity.com/profiles/{currentProfile.SteamId}")">
                        Steam Profile
                    </a>
                    @*<button class="btn btn-primary col ml-1 mr-1">AOE2Recs</button>*@
                    @*<button class="btn btn-primary col ml-1">Age of Empires Profile</button>*@
                </div>

            </div>
        </div>

        <!-- New Component: Team Positions -->
        <div class="card text-center text-dark shadow mt-3">
            <div class="card-header font-weight-bold">
                Team Position's Stats
            </div>
            <div class="card-body">
                <div class="row">
                    @for (int i = 1; i < 9; i++)
                    {
                        <div class="col-3">
                            <div class="card">
                                <!-- Change Color -->
                                @switch (i)
                                {
                                    case 1:
                                        <div class="card-header" style="background-color: #405BFE;">@i</div>
                                        break;
                                    case 2:
                                        <div class="card-header" style="background-color: #FF0000;">@i</div>
                                        break;
                                    case 3:
                                        <div class="card-header" style="background-color: #00FF00;">@i</div>
                                        break;
                                    case 4:
                                        <div class="card-header" style="background-color: #FFFF00;">@i</div>
                                        break;
                                    case 5:
                                        <div class="card-header" style="background-color: #00FFFF;">@i</div>
                                        break;
                                    case 6:
                                        <div class="card-header" style="background-color: #FF57B3;">@i</div>
                                        break;
                                    case 7:
                                        <div class="card-header" style="background-color: #797979;">@i</div>
                                        break;
                                    case 8:
                                        <div class="card-header" style="background-color: #FF9600;">@i</div>
                                        break;
                                }
                                @*<div class="w- w-100 mt-1 mb-1"></div>*@
                                <div class="card-body">
                                    <span> @GetTeamPositionCount(LastMatches, i) </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- New Component: Last Civs Win Rate -->
        <!-- To be defined -->
        <!--
        <div class="card text-center text-dark shadow mt-3">
            <div class="card-header font-weight-bold">
                Civilizations Win Rates
            </div>
            <div class="card-body">
            </div>
        </div>
        -->
    </div>

    @*@if (IsReachingHighestRank())
        {
            <div class="container text-center mt-3">
                <div class="alert alert-success" role="alert">
                    @currentProfile.Name is going to reach it's highest rank!
                </div>
            </div>
        }
        else
        {
            <div class="container text-center mt-3">
                <div class="alert alert-danger" role="alert">
                    @currentProfile.Name is @GetDifferenceFromHighestRating(currentProfile.HighestRating, currentProfile.Rating) of it's highest rank!
                </div>
            </div>
        }*@
}
@code {
    public Models.Profile currentProfile { get; set; }
    private Models.Match[] LastMatches;
    private bool pinnedProfile = false;

    [Parameter]
    public string ProfileId { get; set; }

    private GeneralData GeneralData;

    private List<LeaderboardResult> ProfileLeaderboards;

    protected async override Task OnInitializedAsync()
    {
        //currentProfile = null;
        //Obtain the strings of the app from the LocalStorage, or if missing, call API
        var storedStrings = await localStorage.GetItemAsync<GeneralData>("strings_en");
        if (storedStrings == null) GeneralData = await stringService.GetStringsAsync("en");
        else GeneralData = storedStrings;
        await localStorage.SetItemAsync<GeneralData>("strings_en", GeneralData);

        //Retrieve the last 25 matches of the user
        LastMatches = await playerService.GetMatchHistoryAsync(0, 25, null, ProfileId, null, null);

    }

    protected async override Task OnParametersSetAsync()
    {

        //var storedProfile = await localStorage.GetItemAsync<Models.Profile>("currentProfile");
        //if (storedProfile == null)
        //{
        var profile = await leaderboardService.GetLeaderboardAsync(3, 1, 1, null, null, ProfileId);
        currentProfile = profile.Leaderboard.FirstOrDefault(x => x.ProfileId == int.Parse(ProfileId));
        //}
        //await localStorage.SetItemAsync<Models.Profile>("currentProfile", currentProfile);

        //Retrieve the leaderboards for the user
        ProfileLeaderboards = new List<LeaderboardResult>();
        ProfileLeaderboards = await GetLeaderboardsByUser();

        //Set that the profile is pinned
        var storedProfiles = await localStorage.GetItemAsync<List<Models.Profile>>("storedProfiles");
        if (storedProfiles != null)
            if (storedProfiles.Any(x => x.ProfileId == currentProfile.ProfileId))
                pinnedProfile = true;

        StateHasChanged();
    }

    //protected override void OnParametersSet()
    //{
    //    currentProfile = CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).FirstOrDefault();
    //    base.OnParametersSet();
    //}

    private bool IsReachingHighestRank(LeaderboardResult leaderboard)
    {
        //var selectedLeaderboard = ProfileLeaderboards.Where(x => x.LeaderboardId == leaderboardId).FirstOrDefault();
        //int? highest = CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).Select(x => x.HighestRating).First();
        //int? current = CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).Select(x => x.Rating).First();
        int? highest = leaderboard.Leaderboard.Select(x => x.HighestRating).First();
        int? current = leaderboard.Leaderboard.Select(x => x.Rating).First();
        int? difference = GetDifferenceFromHighestRating(highest, current);
        if (difference != null)
        {
            if (difference < 50) return true;
            else return false;
        }
        else return false;
    }

    private int? GetDifferenceFromHighestRating(int? high, int? low) =>
        (high != null && low != null)
        ? high - low
        : 0;

    private int? GetWinRatePercentage(Models.Profile profile) =>
            (profile.Wins * 100) / profile.Games;

    private int? GetLossRatePercentage(Models.Profile profile) =>
                (profile.Losses * 100) / profile.Games;

    private int? GetDropRatePercentage(Models.Profile profile) =>
        (profile.Drops * 100) / profile.Games;

    private int GetTeamPositionCount(Match[] matches, int color)
    {
        int count = 0;
        Models.Profile[] profiles;
        foreach (var match in matches)
        {
            profiles = match.Players;
            count += profiles.Where(x => x.ProfileId == int.Parse(ProfileId)).Where(x => x.Color == color).Count();
        }
        return count;
    }

    private async Task<List<LeaderboardResult>> GetLeaderboardsByUser()
    {
        var leaderboards = new List<LeaderboardResult>();
        foreach (var id in GeneralData.Leaderboards.Select(x => x.Id).ToList())
        {
            leaderboards.Add(await leaderboardService.GetLeaderboardAsync(id, 1, 1, null, null, ProfileId));
        }
        return leaderboards;
    }

    private async void IsProfilePinned(object check)
    {
        var storedProfiles = await localStorage.GetItemAsync<List<Models.Profile>>("storedProfiles");

        if ((bool)check)
        {
            pinnedProfile = true;
            if (!storedProfiles.Any(x => x.ProfileId == currentProfile.ProfileId))
            {
                storedProfiles.Add(currentProfile);
                await localStorage.SetItemAsync<List<Models.Profile>>("storedProfiles", storedProfiles);
            }
        }
        else
        {
            pinnedProfile = false;
            if (storedProfiles.Any(x => x.ProfileId == currentProfile.ProfileId))
            {
                storedProfiles.Remove(storedProfiles.FirstOrDefault(x => x.ProfileId == currentProfile.ProfileId));
                await localStorage.SetItemAsync<List<Models.Profile>>("storedProfiles", storedProfiles);
            }

        }
    }
}
