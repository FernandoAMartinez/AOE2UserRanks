@inject Services.IPlayerServices playerService

<h3>Stats</h3>
@if (currentProfile == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="card text-center text-dark shadow">
            <div class="card-header font-weight-bold">
                <span class="float-left">#@currentProfile.Rank</span>
                @*@CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).Select(x => x.Name).First()*@
                @currentProfile.Name
            </div>
            <div class="card-img">
                <!-- agregar imagen de steam -->
                <img src="@string.Format($"/img/aoe2decivs/Aztecs.png")" width="96" height="96" class="img-thumbnail" />
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col border bg-primary text-dark font-weight-bold">Current Rating</div>
                </div>
                <div class="row">
                    <div class="col border">
                        @*@CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).Select(x => x.Rating).First()*@
                        @currentProfile.Rating
                    </div>
                </div>
                <div class=" row">
                    <div class="col border bg-success text-dark font-weight-bold">Win</div>
                    <div class="col border bg-danger text-dark font-weight-bold">Lose</div>
                </div>
                <div class=" row">
                    <div class="col border">
                        @*@CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).Select(x => x.Wins).First()*@
                        @currentProfile.Wins
                    </div>
                    <div class="col border">
                        @*@CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).Select(x => x.Losses).First()*@
                        @currentProfile.Losses
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="row text-center">
                    <button class="btn btn-primary col mr-1">
                        <a href="https://steamcommunity.com/profiles/@currentProfile.SteamId">
                            Steam Profile
                        </a>
                    </button>
                    <button class="btn btn-primary col ml-1 mr-1">AOE2Recs</button>
                    <button class="btn btn-primary col ml-1">Age of Empires Profile</button>
                </div>

            </div>
        </div>
        <!-- New Component: Team Positions -->
        <div class="card text-center text-dark shadow mt-3">
            <div class="card-header font-weight-bold">
                Team Position's Stats
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-3">
                        <div class="col order-first border" style="background-color: #405BFE;">1</div>
                        <div class="w- w-100 mt-1 mb-1"></div>
                        <div class="col order-last border">
                        @{
                            LastMatches.Where(x => x.Ranked == true).
                                Select(x => x.Players.Where(
                                    x => x.ProfileId == int.Parse(profile_id)).Select(x => x.Color).ToList());
                        }
                        </div>
                    </div>
                    <div class="col-3">
                        <div class="col order-first border" style="background-color: #FF0000;">2</div>
                        <div class="w- w-100 mt-1 mb-1"></div>
                        <div class="col order-last border">42</div>
                    </div>
                    <div class="col-3">
                        <div class="col order-first border" style="background-color: #00FF00;">3</div>
                        <div class="w- w-100 mt-1 mb-1"></div>
                        <div class="col order-last border">2</div>
                    </div>
                    <div class="col-3">
                        <div class="col order-first border" style="background-color: #FFFF00;">4</div>
                        <div class="w- w-100 mt-1 mb-1"></div>
                        <div class="col order-last border">54</div>
                    </div>
                    <div class="col-3">
                        <div class="col order-first border" style="background-color: #00FFFF;">5</div>
                        <div class="w- w-100 mt-1 mb-1"></div>
                        <div class="col order-last border">34</div>
                    </div>
                    <div class="col-3">
                        <div class="col order-first border" style="background-color: #FF57B3;">6</div>
                        <div class="w- w-100 mt-1 mb-1"></div>
                        <div class="col order-last border">1</div>
                    </div>
                    <div class="col-3">
                        <div class="col order-first border" style="background-color: #797979;">7</div>
                        <div class="w- w-100 mt-1 mb-1"></div>
                        <div class="col order-last border">52</div>
                    </div>
                    <div class="col-3">
                        <div class="col order-first border" style="background-color: #FF9600;">8</div>
                        <div class="w- w-100 mt-1 mb-1"></div>
                        <div class="col order-last border">4</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- New Component: Last Civs Win Rate-->
        <div class="card text-center text-dark shadow mt-3">
            <div class="card-header font-weight-bold">
                Civilizations Win Rates
            </div>
            <div class="card-body">
            </div>
        </div>
    </div>

    @if (IsReachingHighestRank())
    {
        <div class="container text-center mt-3">
            <div class="alert alert-success" role="alert">
                @currentProfile.Name is going to reach it's highest rank!
            </div>
        </div>
    }
    else
    {
        <div class="container text-center mt-3">
            <div class="alert alert-danger" role="alert">
                @currentProfile.Name is @GetDifferenceFromHighestRating(currentProfile.HighestRating, currentProfile.Rating) of it's highest rank!
            </div>
        </div>
    }
}
@code {
    public Models.Profile currentProfile { get; set; }
    private Models.Match[] LastMatches;

    [Inject]
    protected Services.IPlayerServices ApiPlayers { get; set; }

    [CascadingParameter(Name = "ProfileId")]
    public string profile_id { get; set; }

    [CascadingParameter(Name = "CurrentLeaderboard")]
    public Models.LeaderboardResult CurrentLeaderboard { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LastMatches = await ApiPlayers.GetMatchHistoryAsync(0, 25, null, profile_id, null, null);
    }

    protected override void OnParametersSet()
    {
        currentProfile = CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).FirstOrDefault();
        base.OnParametersSet();
    }

    private bool IsReachingHighestRank()
    {
        int? highest = CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).Select(x => x.HighestRating).First();
        int? current = @CurrentLeaderboard.Leaderboard.Where(x => x.ProfileId == Convert.ToInt32(profile_id) && x.ProfileId != null).Select(x => x.Rating).First();
        int? difference = GetDifferenceFromHighestRating(highest, current);
        if (difference != null)
        {
            if (difference < 50) return true;
            else return false;
        }
        else return false;
    }

    private int? GetDifferenceFromHighestRating(int? high, int? low) =>
        (high != null && low != null)
        ? high - low
        : 0;
}
